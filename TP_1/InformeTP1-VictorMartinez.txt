Tópicos II - UNLP - 2019

TP1 Refactoring - Informe Victor Martinez

Clase Book
Code Smell 1: método mal nombrado (no es claro lo que hace) commission.
Refactoring: se renombra el método commission a calcularComision y se renombra el caso de prueba correspondiente a testcalcularComision.

Code Smell 2: código duplicado en métodos calcularComision, price (disfrazado) y priceBeforeTax
	self isBestSeller
		ifTrue: [ com := price / 50 ]
		ifFalse: [ com := price / 100 ]	
Refactoring: se invoca el método calcularComision en price y priceBeforeTax
	priceBeforeTax: se quita variable temporal com y se invoca calcularComision 
		p2 := p + self calcularComision.
	price: se quita variable temporal com y se invoca calcularComision.
		p3 := p2 + self calcularComision .
		
Code Smell 3: código duplicado en métodos price y priceBeforeTax
	p := self isBestSeller
		ifTrue: [ price * 1.1 ]
		ifFalse: [ price ].
Refactoring: se crea método calcularPrecioBase y se invoca desde price y priceBeforeTax, además se genera el caso de prueba testCalcularPrecioBase para el nuevo método.
	priceBeforeTax: se quitan variables temporales p, p2 y se invoca calcularPrecioBase
		^ self calcularPrecioBase + self calcularComision.
	price:se quitan variables temporales y se invoca a calcularPrecioBase y calcularComision
		^ (self calcularPrecioBase  * 1.21 )+ self calcularComision .

Code Smell 4: variable temporal com innecesaria en calcularComision.
	self isBestSeller
		ifTrue: [ com := price / 50 ]
		ifFalse: [ com := price / 100 ].
	^ com
Refactoring: se elimina variable temporal y se devuelve directalmente el resultado.
	^ self isBestSeller
		ifTrue: [ price / 50 ]
		ifFalse: [ price / 100 ].
		
Code Smell 5: llamado explícito a la clase en constructor (en lugar de usar self) y nombre de variable temporal poco claro.
	bs := Book new.
Refactoring: se modifica la llamada a book por self y se cambia el nombre de vaiable a bestSeller.
	bestSeller := self new.