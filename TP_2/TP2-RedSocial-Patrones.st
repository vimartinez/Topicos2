Object subclass: #Visitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Visitor commentStamp: 'Vic 2/3/2020 12:08' prior: 0!Tópicos II – Victor Martinez – TP PatronesRequerimiento 1: Exportar las preguntas en JSon y XML.Se aplica el patrón Visitor sobre las clases Pregunta y Respuesta para exportar los datos en losformatos requeridos.Para ello se genera la clase abstracta Visitor, donde se declaran los métodosvisitPregunta(Preguntas) y visitRespuesta(Respuestas). Luego se crean las clases VisitorJSon yVisitorXML que heredan de Visitor y en donde se implementan los métodos visitPregunta yvisitRespuesta, estos métodos reciben como parámetro el objeto que se desea exportar(Pregunta o Respuesta) y cada clase realiza la exportación en el formato correspondiente.!!Visitor methodsFor: 'visitor' stamp: 'Vic 2/3/2020 12:11'!visitRespuesta: unaRespuesta	"método abstracto para exportar respuesta"^unaRespuesta.! !!Visitor methodsFor: 'visitor' stamp: 'Vic 2/3/2020 12:19'!visitPregunta: unaPregunta	"método abstracto para exportar pregunta"^ unaPregunta.! !Visitor subclass: #VisitorJSon	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!VisitorJSon commentStamp: 'Vic 2/3/2020 13:53' prior: 0!Implementación de Visitor para exportar preguntas y respuestas en formato JSonrecibe una lista de preguntas y las devuelve en formatao JSon!!VisitorJSon methodsFor: 'visitor' stamp: 'Vic 2/3/2020 14:58'!visitPregunta: unaPregunta	"Implementación de visitor para exportar pregunta a JSon"	| salida |	salida := '{"pregunta":['.	salida := salida , '{"titulo":"' , unaPregunta titulo , '",'.	salida := salida , '"descripcion":"' , unaPregunta descripcion , '",'.	salida := salida , '"fechaAlta":"' , unaPregunta fechaAlta asString , '",'.	salida := salida , '"usuario":"' , unaPregunta usuario login , '",'.	salida := salida , '"votos":"' , unaPregunta contarVotos asString , '",'.	unaPregunta respuestas isEmpty		ifFalse: [ salida := salida , '"respuestas":['.			unaPregunta respuestas				do: [ :a | 					salida := salida , '{"descripcion":"' , a descripcion , '","fechaAlta":"'						, a fechaAlta asString , '","usuario":"' , a usuario login , '","votos":"'						, a contarVotos asString , '"},' ].			salida := salida copyFrom: 1 to: salida size - 1.			salida := salida , ']}]}' ]		ifTrue: [ salida := salida copyFrom: 1 to: salida size - 1.			salida := salida , '}]}' ].	^ salida! !!VisitorJSon methodsFor: 'visitor' stamp: 'Vic 2/3/2020 14:21'!visitPreguntas: preguntas	"Implementación de visitor para exportar pregunta a JSon"|salida|salida:= '{"preguntas":['.  preguntas  do: [:a | salida := salida, '{"titulo":"', a titulo ,'","descripcion":"', a descripcion ,'","fechaAlta":"',  a fechaAlta asString ,'","usuario":"', a usuario login ,'","votos":"', a contarVotos asString  ,'"},'].salida := salida copyFrom: 1 to: salida size - 1.salida := salida , ']}'.^salida.! !TestCase subclass: #VisitorJSonTest	instanceVariableNames: 'u1 u2 t1 p1 p2 p3 r1 r2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!VisitorJSonTest commentStamp: 'Vic 2/3/2020 15:01' prior: 0!Caso de prueba para VisitorJSon!!VisitorJSonTest methodsFor: 'setUp' stamp: 'Vic 2/3/2020 15:04'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lautaro' login: 'lauti'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.r1:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.r2:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Me gusto pero estuvo mejor la anterior.'.u1 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p2 calificacion: true.! !!VisitorJSonTest methodsFor: 'test' stamp: 'Vic 2/3/2020 15:19'!testVisitPregunta	"Caso de prueba visitPregunta de VisitorJSon"	| vj jSon  |	vj := VisitorJSon new.	jSon := vj visitPregunta: p1.	self assert: jSon equals: 0.! !Visitor subclass: #VisitorXML	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!VisitorXML commentStamp: 'Vic 2/3/2020 12:17' prior: 0!Implementación de Visitor para exportar preguntas y respuestas en formato XML!!VisitorXML methodsFor: 'visitor' stamp: 'Vic 2/3/2020 15:40'!visitPregunta: unaPregunta	"Implementación de visitor para exportar pregunta a XML"	| salida |	salida := '<?xml version="1.0"?><pregunta>'.	salida := salida , '<titulo>' , unaPregunta titulo , '</titulo>'.	salida := salida , '<descripcion>' , unaPregunta descripcion , '</descripcion>'.	salida := salida , '<fechaAlta>' , unaPregunta fechaAlta asString , '</fechaAlta>'.	salida := salida , '<usuario>' , unaPregunta usuario login , '</usuario>'.	salida := salida , '<votos>' , unaPregunta contarVotos asString , '</votos>'.	unaPregunta respuestas isEmpty		ifFalse: [ salida := salida , '<respuestas>'.			unaPregunta respuestas				do: [ :a | 					salida := salida , '<respuesta><descripcion>' , a descripcion						, '</descripcion><fechaAlta>' , a fechaAlta asString , '</fechaAlta><usuario>'						, a usuario login , '</usuario><votos>' , a contarVotos asString						, '</votos></respuesta>' ].			salida := salida , '</respuestas>' ].	salida := salida , '</pregunta>'.	^ salida! !TestCase subclass: #VisitorXMLTest	instanceVariableNames: 'u1 u2 t1 p1 p2 p3 r1 r2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!VisitorXMLTest commentStamp: 'Vic 2/3/2020 15:42' prior: 0!Caso de prueba para VisitorXML!!VisitorXMLTest methodsFor: 'test' stamp: 'Vic 2/3/2020 15:44'!testVisitPregunta	"Caso de prueba visitPregunta de VisitorXML"	| vx xMl  |	vx := VisitorXML new.	xMl := vx visitPregunta: p1.	self assert: xMl equals: 0.! !!VisitorXMLTest methodsFor: 'setUp' stamp: 'Vic 2/3/2020 15:43'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lautaro' login: 'lauti'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.r1:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.r2:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Me gusto pero estuvo mejor la anterior.'.u1 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p2 calificacion: true.! !Object subclass: #CuOOra	instanceVariableNames: 'usuarios topicos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!CuOOra commentStamp: 'Vic 6/23/2019 18:38' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase CuOOra: clase de aplicacion!!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:29'!obtenerTodosLosTopicos	^ topicos! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:30'!obtenerTodosLosUsuarios	^ usuarios! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:22'!agregarTopico: unTopico	topicos add:  unTopico.! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:30'!agregarUsuario: unUsuario	usuarios add:  unUsuario.! !!CuOOra methodsFor: 'initialization' stamp: 'Victor 6/2/2019 22:18'!initialize 	"initialize de clase CuOOra"	topicos  := OrderedCollection new. 	usuarios   := OrderedCollection new.  	! !Object subclass: #Entrada	instanceVariableNames: 'usuario fechaAlta descripcion votos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Entrada commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Entrada: clase abstracta para implemetar las clases pregunta y respuesta!!Entrada methodsFor: 'accessing' stamp: 'Vic 6/29/2019 15:18'!descripcion	^ descripcion ! !!Entrada methodsFor: 'accessing' stamp: 'Vic 6/29/2019 15:13'!fechaAlta	^ fechaAlta ! !!Entrada methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:27'!descripcion: unaDescripcion	"setter de descripcion"	descripcion := unaDescripcion .! !!Entrada methodsFor: 'accessing' stamp: 'Victor 6/6/2019 19:39'!usuario	^ usuario! !!Entrada methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:23'!usuario: unUsuario	"setter de usuario"	usuario := unUsuario  .! !!Entrada methodsFor: 'initialization' stamp: 'Vic 6/30/2019 22:12'!initialize 	"initialize de clase Entrada"	descripcion  := ''. 	fechaAlta  := DateAndTime now.  	votos  := OrderedCollection new.		! !!Entrada methodsFor: 'entrada' stamp: 'Vic 7/16/2019 22:27'!contarVotos	"devuelve los votos de una entrada"	|cantVotos votosPositivos votosNegativos|	cantVotos :=0.	votosPositivos := votos count: [:a | a esPositivo]. 	votosNegativos := votos count: [:a | a esPositivo not].	cantVotos := votosPositivos - votosNegativos.	^cantVotos.! !!Entrada methodsFor: 'entrada' stamp: 'Vic 6/30/2019 22:10'!agregarVoto: unVoto	"Agrega un voto a la entrada"		 votos add: unVoto .	! !Entrada subclass: #Pregunta	instanceVariableNames: 'titulo topicos respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Pregunta commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Pregunta!!Pregunta methodsFor: 'initialization' stamp: 'Victor 6/9/2019 22:51'!initialize 	"initialize de clase Entrada"	super initialize.	titulo  := ''.	usuario := ''.	topicos := OrderedCollection new.	respuestas  := OrderedCollection new. 	! !!Pregunta methodsFor: 'pregunta' stamp: 'Victor 6/6/2019 19:47'!borrarRespuestas	"borrar todas las respuestas de una pregunta"	self respuestas removeAll.	! !!Pregunta methodsFor: 'pregunta' stamp: 'Vic 6/15/2019 23:41'!obtenerRespuestas	"devuelve todas las respuestas de una pregunta ordenadas por cantidad de likes"	^respuestas  asSortedCollection: [ :a :b | a contarVotos > b contarVotos  ]! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 6/2/2019 20:15'!titulo	^ titulo! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:40'!titulo: unTitulo	"setter de titulo"	titulo:= unTitulo .! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 5/26/2019 15:09'!topicos: unTopico	"agrega un t√≥pico a la pregunta"	topicos add: unTopico .! !!Pregunta methodsFor: 'accessing' stamp: 'Vic 7/20/2019 19:29'!agregarRespuesta: anObject	respuestas add:  anObject! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 6/2/2019 09:05'!respuestas	^ respuestas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'initialization' stamp: 'Vic 7/22/2019 19:56'!descripcion: unaDescripcion usuario: unUsuario titulo: unTitulo topico: unTopico	"Constructor de la clase Pregunta"	| preg |				preg := self new.			preg usuario: unUsuario .			preg titulo: unTitulo .			preg topicos: unTopico .			preg descripcion: unaDescripcion  .			unTopico preguntas: preg.			unUsuario preguntas: preg.			^preg.				! !Entrada subclass: #Respuesta	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Respuesta commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Respuesata: permite responder una pregunta dada.!!Respuesta methodsFor: 'accessing' stamp: 'Victor 5/30/2019 22:10'!pregunta: unaPregunta	"setter de preunta"	pregunta := unaPregunta .! !!Respuesta methodsFor: 'accessing' stamp: 'Vic 6/30/2019 18:59'!pregunta	"getter de preunta"	^ pregunta .! !!Respuesta methodsFor: 'initialization' stamp: 'Vic 6/15/2019 23:35'!initialize 	"initialize de clase Entrada"	super initialize.	descripcion := ''.	fechaAlta := DateAndTime now.	usuario := ''.	pregunta := ''.		! !!Respuesta methodsFor: 'respuesta' stamp: 'Vic 7/22/2019 19:44'!estaEntreLasMejores	"devuelve verdadero si la respuesta tiene mas likes que el promedio de repuestas de la pregunta."| sum prom| 	prom := 0.	sum:= 0.	sum := pregunta respuestas sumNumbers: [ :a | a contarVotos ].	prom := sum / pregunta respuestas size . 	^ (prom < self contarVotos )  .	 	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'accesing' stamp: 'Vic 7/22/2019 19:56'!pregunta: unaPregunta usuario: unUsuario descripcion: unaDescripcion	"Constructor de la clase Respuesta"	| resp |			resp := self new.			resp usuario: unUsuario .			resp pregunta: unaPregunta  .			resp descripcion: unaDescripcion  .			unaPregunta agregarRespuesta: resp.			unUsuario agregarRespuesta: resp.			^resp.				! !Object subclass: #Topico	instanceVariableNames: 'titulo descripcion preguntas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Topico commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Topico: un topico es un tema en particular sobre el cual se hacen preguntas y respuestas.!!Topico methodsFor: 'topico' stamp: 'Vic 6/28/2019 20:49'!obtenerPreguntas	"devuelve todas las preguntas del topico" 	^self preguntas .	! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:00'!descripcion	^ descripcion! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:00'!titulo	^ titulo! !!Topico methodsFor: 'accessing' stamp: 'Victor 6/1/2019 20:29'!preguntas	^ preguntas! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:01'!descripcion: unaDescripcion	"setter de descripcion"	descripcion := unaDescripcion .! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:37'!titulo: unTitulo	"setter de Titulo"	titulo := unTitulo  .! !!Topico methodsFor: 'accessing' stamp: 'Victor 6/1/2019 20:33'!preguntas: anObject	preguntas add:  anObject.! !!Topico methodsFor: 'initialization' stamp: 'Victor 6/1/2019 20:33'!initialize 	"initialize de clase Topico"	descripcion  := ''. 	titulo  := ''.  	preguntas := OrderedCollection new.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'initialization' stamp: 'Vic 6/28/2019 20:37'!titulo: unTitulo descrip: unaDescripcion 	"Constructor de la clase Topico"	| topico |	topico  := self new.	topico titulo: unTitulo  .	topico descripcion: unaDescripcion .	^topico.! !Object subclass: #Usuario	instanceVariableNames: 'nombreApe login clave fechaAlta followerDe topicosDeInteres preguntas respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Usuario commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Usuario: Representa a un usuario en la aplicacion.!!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/22/2019 13:57'!borrarPregunta: unaPregunta	"Borra un pregunta realizada por el usuario"(unaPregunta usuario  =  self)  		ifFalse:  [ ^self error:  'El el usuario no es el creador de la pregunta'.  ].		unaPregunta borrarRespuestas .	 preguntas remove: unaPregunta .		^'Pregunta borrada correctamente'.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:06'!obtenerRespuestas 	"devuelve todas las respuestas que realizo el usuario"	^respuestas . ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!agregarTopicosDeInteres: unTopico	"agrega un topico de interes a un usuario"			 (topicosDeInteres includes: unTopico) 		ifTrue:   [ ^self error:  'El usuario ',self nombreApe,' ya es tiene cargado el topico ',unTopico titulo .  ].								topicosDeInteres add: unTopico .! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!obtenerTodasLasPreguntas	"devuelve todas las preguntas que realizo el usuario"	^preguntas. ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:21'!realizarPregunta: unaDescripcion titulo: unTitulo  topico: unTopico	"Genera una nueva pregunta"	|preg|	preg := Pregunta descripcion: unaDescripcion usuario: self titulo: unTitulo topico: unTopico.		^preg.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 18:21'!responderPregunta: unaPregunta descripcion: unaDescripcion	"Responde una pregunta"	|resp|	resp := Respuesta pregunta: unaPregunta usuario: self descripcion: unaDescripcion .	^resp.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/16/2019 20:58'!obtenerPreguntasRelevantes	"devuelve todas las preguntas relevantes para el usuario"	|pregRelevantes |	pregRelevantes := OrderedCollection new.	topicosDeInteres  do: [:a | pregRelevantes addAll: a obtenerPreguntas  ]. 	followerDe do: [:a | pregRelevantes addAll: a obtenerTodasLasPreguntas   ]. 		^ pregRelevantes. ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!agregarFollowerDe: unUsuario	"Registra un usuario como follower de otro"	(unUsuario  = self)  		ifTrue:   [ ^self error:  'Un usuario no puede ser follower de si mismo'.  ].	 (followerDe includes: unUsuario) 		ifTrue:   [ ^self error:  'El usuario ',self nombreApe,' ya es seguidor de ',unUsuario nombreApe .  ].			followerDe add: unUsuario! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/20/2019 18:50'!calificarEntrada: unaEntrada calificacion: unaCalificacion	"Califica una entrada de forma positiva o negativa"	|calif|		calif := Voto voto: unaCalificacion  usuario: self entrada:unaEntrada .  	 unaEntrada agregarVoto: calif.	^calif.! !!Usuario methodsFor: 'initialization' stamp: 'Victor 6/3/2019 22:17'!initialize 	"initialize de clase Usuario"	nombreApe := ''. 	login := ''.  	clave :=''.	fechaAlta := DateAndTime now.	followerDe  := OrderedCollection new.	topicosDeInteres  := OrderedCollection new.	preguntas   := OrderedCollection new.	respuestas   := OrderedCollection new.! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:21'!login: unLogin	"setter de login"	login := unLogin .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!login	^ login! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:49'!topicosDeInteres	^ topicosDeInteres! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:47'!clave	"getter de clave"	^clave .! !!Usuario methodsFor: 'accessing' stamp: 'Vic 7/20/2019 19:29'!agregarRespuesta:  anObject	respuestas add:  anObject. ! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:30'!clave: unaClave	"setter de clave"	clave := unaClave .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!followerDe	^ followerDe! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!fechaAlta	^ fechaAlta! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:40'!nombreApe	"getter de nombreApe"	^ nombreApe  .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 6/3/2019 20:54'!preguntas: anObject	preguntas add:  anObject. ! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:19'!nombreApe: unNombre	"setter de nombreApe"	nombreApe := unNombre .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'initialization' stamp: 'Victor 5/24/2019 22:29'!nombre: unNombre login: unLogin clave: unaClave	"Constructor de la clase Usuario"	| user |	user := self new.	user nombreApe: unNombre .	user login: unLogin .	user clave: unaClave .	^user.! !TestCase subclass: #Voto	instanceVariableNames: 'usuario fecha esPositivo entrada'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Voto commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Voto: Se utiliza para calificar las preguntas y respuestas.la calificacion puede ser negativa o positiva y suma o resta un punto segun sea el caso.!!Voto methodsFor: 'initialization' stamp: 'Victor 6/9/2019 20:22'!initialize 	"initialize de clase Voto"	esPositivo := false. 	usuario := ''.  	entrada := ''.	fecha := DateAndTime now.	! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 22:28'!esPositivo	^ esPositivo! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:12'!esPositivo: anObject	esPositivo := anObject! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:25'!entrada: anObject	entrada := anObject! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:10'!fecha	^ fecha  ! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:10'!usuario	^ usuario ! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:12'!entrada	^entrada ! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:10'!usuario: anObject	usuario := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Voto class	instanceVariableNames: ''!!Voto class methodsFor: 'initalization' stamp: 'Vic 7/1/2019 19:15'!voto: votoPostivo usuario:unUsuario entrada:unaEntrada	"Constructor de  clase Voto"	| voto |		"(unUsuario  isMemberOf: Usuario)  	 ifFalse:  [ ^self error:  'El objeto enviado no es una instancia de la clase Usuario'.  ].	 (unaEntrada   isKindOf: Entrada)  	 ifFalse:  [ ^self error:  'El objeto enviado no es una instancia de la clase Entrada'.  ]."			voto := self new.			voto usuario: unUsuario .			voto esPositivo:  votoPostivo .			voto entrada: unaEntrada .			^voto.					  			! !