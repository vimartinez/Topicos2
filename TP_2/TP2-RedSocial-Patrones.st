TestCase subclass: #ActivaTest	instanceVariableNames: 'u1 t1 p1 r1 u2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!ActivaTest commentStamp: 'Vic 2/4/2020 17:10' prior: 0!Caso de prueba de State Activa!!ActivaTest methodsFor: 'setUp' stamp: 'Vic 2/4/2020 17:19'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor M' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Victor M' login: 'vic'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.! !!ActivaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:36'!testActiva	"Caso de prueba Activa de State"	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	self assert: (p1 estado isMemberOf: Activa).	! !!ActivaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:37'!testActivaAgregarRespuesta	"Caso de prueba Activa de State"	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	self assert: (p1 estado isMemberOf: Activa).	self shouldnt: [Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo buena'] raise: Error.	! !!ActivaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:37'!testActivaRetrocederEstado	"Caso de prueba Activa de State"	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	self assert: (p1 estado isMemberOf: Activa).	p1 retrocederEstado.	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo buena'.	self should: [p1 retrocederEstado] raise: Error.	! !TestCase subclass: #CerradaTest	instanceVariableNames: 'u1 t1 p1 r1 u2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!CerradaTest commentStamp: 'Vic 2/4/2020 17:28' prior: 0!Caso de prueba de State Cerrada!!CerradaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:37'!testCerradaAvanzarEstado	"Caso de prueba Cerrada de State"	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	p1 avanzarEstado .	self should: [p1 avanzarEstado ] raise: Error.! !!CerradaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:37'!testCerradaRetrocederEstado	"Caso de prueba Cerrada de State"	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	p1 avanzarEstado .	self should: [p1 retrocederEstado] raise: Error.! !!CerradaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:37'!testCerradaAgregarRespuesta	"Caso de prueba Cerrada de State"	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	p1 avanzarEstado .	self should: [Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo buena'] raise: Error.! !!CerradaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:37'!testCerrada	"Caso de prueba Cerrada de State"	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	p1 avanzarEstado .	self assert: (p1 estado isMemberOf: Cerrada).! !!CerradaTest methodsFor: 'setUp' stamp: 'Vic 2/4/2020 17:29'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor M' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lauti M' login: 'lauti'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.! !TestCase subclass: #CreadaTest	instanceVariableNames: 'u1 t1 p1 r1 u2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!CreadaTest commentStamp: 'Vic 2/4/2020 16:43' prior: 0!Caso de prueba de State Creada!!CreadaTest methodsFor: 'setUp' stamp: 'Vic 2/4/2020 16:57'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor M' login: 'vic'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.! !!CreadaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:36'!testCreadaAvanzarEstado	"Caso de prueba Creada de State"	self assert: (p1 estado isMemberOf: Creada).	p1 avanzarEstado .	self assert: (p1 estado isMemberOf: Activa).				! !!CreadaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:36'!testCreadaAgregarRespuesta	"Caso de prueba Creada de State"	self assert: (p1 estado isMemberOf: Creada).	self should: [Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo buena'] raise: Error.			! !!CreadaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:35'!testCreada	"Caso de prueba Creada de State"	self assert: (p1 estado isMemberOf: Creada)! !!CreadaTest methodsFor: 'test' stamp: 'Vic 2/4/2020 17:36'!testCreadaRetrocederEstado	"Caso de prueba Creada de State"	self assert: (p1 estado isMemberOf: Creada).	self should: [p1 retrocederEstado ] raise: Error.				! !TestCase subclass: #PreguntaProxyTest	instanceVariableNames: 'u1 u2 u3 t1 p1 p2 p3 pregProxy sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!PreguntaProxyTest commentStamp: 'Vic 2/4/2020 18:04' prior: 0!Caso de prueba pregunta proxy!!PreguntaProxyTest methodsFor: 'test' stamp: 'Vic 2/6/2020 16:09'!testObtenerRespuestas	"Caso de prueba proxy"		t1 obtenerPreguntas collect: [ :a | sDAO put: a ].	self assert: (sDAO retrieveAllByClass: PreguntaProxy )size equals: 3.	pregProxy := sDAO		select: [ :it | it pregunta descripcion includesSubstring: 'Formula uno' ]		forClass: PreguntaProxy.	self assert: pregProxy size equals: 1.	self assert: (pregProxy first obtenerRespuestas) size equals: 2.	pregProxy first borrarRespuestas .	self assert: (pregProxy first obtenerRespuestas) size equals: 0.! !!PreguntaProxyTest methodsFor: 'setUp' stamp: 'Vic 2/6/2020 15:24'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .sDAO := SluggishDAO new.u1:= Usuario nombre: 'Victor M' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lauti M' login: 'lauti'  clave: '1234qwer' .u3:= Usuario nombre: 'Santi M' login: 'santi'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.p1 avanzarEstado.p2 avanzarEstado.p3 avanzarEstado.Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.Respuesta pregunta: p1 usuario: u3  descripcion: 'Me gusto pero estuvo mejor la anterior.'.Respuesta pregunta: p2 usuario: u3  descripcion: 'No tengo idea.'.Respuesta pregunta: p3 usuario: u1  descripcion: 'No se pero seguro más que Prost.'.! !Entrada subclass: #Proxy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Proxy commentStamp: 'Vic 2/4/2020 17:46' prior: 0!Tópicos II – Victor Martinez – TP PatronesRequerimiento 4: Optimización del acceso a la información.Se utiliza el patrón Proxy para optimizar la carga de objetos.Para ello se genera la clase abstracta Subject donde se declaran los métodosobtenerRespuestas y borrarRespuestas correspondientes a la clase Pregunta.P á g i n a 6 | 7Además, se crea la clase PreguntaProxy que hereda de Subject, y se modifica la clase Preguntapara que herede ahora de subject!!Proxy methodsFor: 'proxy' stamp: 'Vic 2/4/2020 17:48'!borrarRespuestas	"metodo abstracto proxy"^'Implementar!!'.! !!Proxy methodsFor: 'proxy' stamp: 'Vic 2/4/2020 17:48'!obtenerRespuestas	"metodo abstracto proxy"^'Implementar!!'.! !Proxy subclass: #PreguntaProxy	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!PreguntaProxy commentStamp: 'Vic 2/4/2020 17:50' prior: 0!Implementación de proxy para pregunta!!PreguntaProxy methodsFor: 'proxy' stamp: 'Vic 2/4/2020 17:53'!borrarRespuestas	"implementació de proxy para preguntas"^self pregunta borrarRespuestas .! !!PreguntaProxy methodsFor: 'proxy' stamp: 'Vic 2/4/2020 17:53'!obtenerRespuestas	"implementació de proxy para preguntas"^self pregunta obtenerRespuestas .! !!PreguntaProxy methodsFor: 'accessing' stamp: 'Vic 2/4/2020 18:27'!pregunta: unaPregunta	pregunta := unaPregunta.	^pregunta.! !!PreguntaProxy methodsFor: 'accessing' stamp: 'Vic 2/4/2020 17:54'!pregunta	^ pregunta! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PreguntaProxy class	instanceVariableNames: ''!!PreguntaProxy class methodsFor: 'initialization' stamp: 'Vic 2/6/2020 10:24'!pregunta: unaPregunta	"Constructor de la clase PreguntaProxy"	| preguntaProxy  |	preguntaProxy  := self new.	preguntaProxy pregunta: unaPregunta   .	^preguntaProxy.! !TestCase subclass: #RelevantesTest	instanceVariableNames: 'u1 u2 u3 t1 t2 t3 p1 p2 p3 p4 p5 r1 r2 p6'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!RelevantesTest commentStamp: 'Vic 2/4/2020 15:09' prior: 0!Caso de prueba de Strategy Relevantes!!RelevantesTest methodsFor: 'setUp' stamp: 'Vic 2/4/2020 18:02'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor M' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lautaro MR' login: 'lauti'  clave: '1234qwer' .u3:= Usuario nombre: 'Santiago MR' login: 'santi'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.t2:= Topico titulo: 'Programacion' descrip: 'Consulta sobre tu lengaje favorito'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.p4:= Pregunta descripcion: 'Como abro un archivo de texto' usuario: u1 titulo: 'Java' topico: t2.p5:= Pregunta descripcion: 'que significa isset en PHP' usuario: u3 titulo: 'PHP' topico: t2.p6:= Pregunta descripcion: 'para qeu sirve el ;?' usuario: u3 titulo: 'Java' topico: t2.p1 avanzarEstado .r1:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.r2:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Me gusto pero estuvo mejor la anterior.'.u1 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p2 calificacion: true.u3 agregarFollowerDe: u1.u3 agregarFollowerDe: u2.u3 agregarTopicosDeInteres: t1.u3 agregarTopicosDeInteres: t2.! !!RelevantesTest methodsFor: 'test' stamp: 'Vic 2/4/2020 15:29'!testRelevantes	"Caso de prueba Relevantes de Strategy"	| preguntas r  |	r := Relevantes new.	preguntas := r obtenerPreguntasRelevantes: u3.	self assert: preguntas size equals: 10.	self assert: preguntas first equals: p1.! !TestCase subclass: #SocialTest	instanceVariableNames: 'u1 u2 u3 t1 t2 t3 p1 p2 p3 p4 p5 r1 r2 p6'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!SocialTest commentStamp: 'Vic 2/4/2020 16:01' prior: 0!Caso de prueba de Strategy Social!!SocialTest methodsFor: 'setUp' stamp: 'Vic 2/4/2020 18:03'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor M' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lautaro MR' login: 'lauti'  clave: '1234qwer' .u3:= Usuario nombre: 'Santiago MR' login: 'santi'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.t2:= Topico titulo: 'Programacion' descrip: 'Consulta sobre tu lengaje favorito'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.p4:= Pregunta descripcion: 'Como abro un archivo de texto' usuario: u1 titulo: 'Java' topico: t2.p5:= Pregunta descripcion: 'que significa isset en PHP' usuario: u3 titulo: 'PHP' topico: t2.p6:= Pregunta descripcion: 'para qeu sirve el ;?' usuario: u3 titulo: 'Java' topico: t2.p1 avanzarEstado .r1:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.r2:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Me gusto pero estuvo mejor la anterior.'.u1 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p2 calificacion: true.u3 agregarFollowerDe: u1.u3 agregarFollowerDe: u2.u3 agregarTopicosDeInteres: t1.u3 agregarTopicosDeInteres: t2.! !!SocialTest methodsFor: 'test' stamp: 'Vic 2/4/2020 16:00'!testSocial	"Caso de prueba Sotial de Strategy"	| preguntas s  |	s := Social new.	preguntas := s obtenerPreguntasRelevantes: u3.	self assert: preguntas size equals: 4.	self assert: preguntas first equals: p1.! !Object subclass: #State	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!State commentStamp: 'Vic 2/4/2020 16:19' prior: 0!Tópicos II – Victor Martinez – TP PatronesRequerimiento 3: Estados en la pregunta.Se utiliza el patrón State para aplicar diferentes estados a las preguntas.Para ello se crea la clase abstracta PreguntaState que define los métodos avanzarEstado yretrocederEstado. Luego se crean las clases Creada, Activa y Cerrada que implementan estosmétodos con el criterio requerido para los cambios de estado.Además, se modifica el método agregarRespuesta de la clase Pregunta para validar el estadode la pregunta antes de generar una respuesta y también el constructor para instanciar elestado al momento de la creación.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!State methodsFor: 'state' stamp: 'Vic 2/4/2020 16:21'!retrocederEstado: unaPregunta	"método abstracto de state"^'Implementar!!'.! !!State methodsFor: 'state' stamp: 'Vic 2/4/2020 16:21'!avanzarEstado: unaPregunta	"método abstracto de state"^'Implementar!!'.! !State subclass: #Activa	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Activa commentStamp: 'Vic 2/4/2020 16:23' prior: 0!Implementación de State para estados de pregunta activa!!Activa methodsFor: 'state' stamp: 'Vic 2/4/2020 16:30'!retrocederEstado: unaPregunta	(unaPregunta estado isMemberOf: Activa)		ifFalse: [ ^ self 	error: 'Solo se puede volver a estado Creada desde estado Activa' ].	unaPregunta respuestas isEmpty			ifFalse: [ ^ self	error:	'Solo se puede volver a estado creada si la pregunta no tiene respuestas' ].	unaPregunta estado: Creada new.	^ 'Pregunta en estado Creada'! !!Activa methodsFor: 'state' stamp: 'Vic 2/4/2020 16:28'!avanzarEstado: unaPregunta	unaPregunta estado: Cerrada new.	^ 'Pregunta en estado Cerrada'! !State subclass: #Cerrada	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Cerrada commentStamp: 'Vic 2/4/2020 16:23' prior: 0!Implementación de State para estados de pregunta Cerrada!!Cerrada methodsFor: 'state' stamp: 'Vic 2/4/2020 16:36'!retrocederEstado: unaPregunta^self error: 'No se puede retroceder del estado Cerrada'.! !!Cerrada methodsFor: 'state' stamp: 'Vic 2/4/2020 16:31'!avanzarEstado: unaPregunta^self error: 'No se puede avanzar del estado Cerrada'.! !State subclass: #Creada	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Creada commentStamp: 'Vic 2/4/2020 16:23' prior: 0!Implementación de State para estados de pregunta Creada!!Creada methodsFor: 'state' stamp: 'Vic 2/4/2020 16:39'!retrocederEstado: unaPregunta^self error: 'No se puede retroceder del estado Creada'.! !!Creada methodsFor: 'state' stamp: 'Vic 2/4/2020 16:38'!avanzarEstado: unaPreguntaunaPregunta estado: Activa new.^ 'Pregunta en estado Activa'.! !Object subclass: #Strategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Strategy commentStamp: 'Vic 2/4/2020 10:23' prior: 0!Tópicos II – Victor Martinez – TP PatronesRequerimiento 2: Personalización del Home.Se utiliza el patrón Strategy para aplicar las diferentes personalizaciones del home.Para ello se crea la clase abstracta Strategy de define el método obtenerPreguntasRelevantes,luego se crean las clases Social, Topicos, y Relevantes que heredan de Strategy e implementanel método obtenerPreguntasRelevantes con el criterio correspondiente.!!Strategy methodsFor: 'strategy' stamp: 'Vic 2/4/2020 10:59'!obtenerPreguntasRelevantes: unUsuario	"Método abstracto para implementar Strategy"^'método a implementar'.! !Strategy subclass: #Relevantes	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Relevantes commentStamp: 'Vic 2/4/2020 10:51' prior: 0!Implementación de Strategy para mostrar las preguntas relevantes!!Relevantes methodsFor: 'strategy' stamp: 'Vic 2/4/2020 15:04'!obtenerPreguntasRelevantes: unUsuario	"Devuelve preguntas relevantes"|pregRelevantes |pregRelevantes := SortedCollection new.pregRelevantes := SortedCollection sortBlock: [:a :c | a contarVotos  > c contarVotos ].unUsuario topicosDeInteres do: [:a | pregRelevantes addAll: a obtenerPreguntas ].unUsuario followerDe do: [:a | pregRelevantes addAll: a obtenerTodasLasPreguntas   ].^ pregRelevantes.! !Strategy subclass: #Social	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Social commentStamp: 'Vic 2/4/2020 10:51' prior: 0!Implementación de Strategy para mostrar las preguntas Sociales!!Social methodsFor: 'strategy' stamp: 'Vic 2/4/2020 11:03'!obtenerPreguntasRelevantes: unUsuario	"Devuelve preguntas según los followers del usuario"|pregRelevantes |pregRelevantes := OrderedCollection new.unUsuario followerDe do: [:a | pregRelevantes addAll: a obtenerTodasLasPreguntas ].^ pregRelevantes.! !Strategy subclass: #Topicos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Topicos commentStamp: 'Vic 2/4/2020 10:52' prior: 0!Implementación de Strategy para mostrar las preguntas por tópicos!!Topicos methodsFor: 'strategy' stamp: 'Vic 2/4/2020 11:02'!obtenerPreguntasRelevantes: unUsuario	"Devuelve preguntas relevantes según los tópicos de interés"|pregRelevantes |pregRelevantes := OrderedCollection new.unUsuario topicosDeInteres do: [:a | pregRelevantes addAll: a obtenerPreguntas].^ pregRelevantes.! !TestCase subclass: #TopicosTest	instanceVariableNames: 'u1 u2 u3 t1 t2 t3 p1 p2 p3 p4 p5 r1 r2 p6'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!TopicosTest commentStamp: 'Vic 2/4/2020 16:01' prior: 0!Caso de prueba de Strategy Topicos!!TopicosTest methodsFor: 'setUp' stamp: 'Vic 2/4/2020 18:03'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor M' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lautaro MR' login: 'lauti'  clave: '1234qwer' .u3:= Usuario nombre: 'Santiago MR' login: 'santi'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.t2:= Topico titulo: 'Programacion' descrip: 'Consulta sobre tu lengaje favorito'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.p4:= Pregunta descripcion: 'Como abro un archivo de texto' usuario: u1 titulo: 'Java' topico: t2.p5:= Pregunta descripcion: 'que significa isset en PHP' usuario: u3 titulo: 'PHP' topico: t2.p6:= Pregunta descripcion: 'para qeu sirve el ;?' usuario: u3 titulo: 'Java' topico: t2.p1 avanzarEstado .r1:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.r2:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Me gusto pero estuvo mejor la anterior.'.u1 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p2 calificacion: true.u3 agregarFollowerDe: u1.u3 agregarFollowerDe: u2.u3 agregarTopicosDeInteres: t1.u3 agregarTopicosDeInteres: t2.! !!TopicosTest methodsFor: 'test' stamp: 'Vic 2/6/2020 17:09'!testTopicos	"Caso de prueba Topicos de Strategy"	| preguntas t  |	t := Topicos new.	preguntas := t obtenerPreguntasRelevantes: u3.	self assert: preguntas size equals: 6.	self assert: preguntas first pregunta equals: p1.! !Object subclass: #Visitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!Visitor commentStamp: 'Vic 2/3/2020 12:08' prior: 0!Tópicos II – Victor Martinez – TP PatronesRequerimiento 1: Exportar las preguntas en JSon y XML.Se aplica el patrón Visitor sobre las clases Pregunta y Respuesta para exportar los datos en losformatos requeridos.Para ello se genera la clase abstracta Visitor, donde se declaran los métodosvisitPregunta(Preguntas) y visitRespuesta(Respuestas). Luego se crean las clases VisitorJSon yVisitorXML que heredan de Visitor y en donde se implementan los métodos visitPregunta yvisitRespuesta, estos métodos reciben como parámetro el objeto que se desea exportar(Pregunta o Respuesta) y cada clase realiza la exportación en el formato correspondiente.!!Visitor methodsFor: 'visitor' stamp: 'Vic 2/3/2020 12:19'!visitPregunta: unaPregunta	"método abstracto para exportar pregunta"^ unaPregunta.! !Visitor subclass: #VisitorJSon	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!VisitorJSon commentStamp: 'Vic 2/3/2020 13:53' prior: 0!Implementación de Visitor para exportar preguntas y respuestas en formato JSonrecibe una lista de preguntas y las devuelve en formatao JSon!!VisitorJSon methodsFor: 'visitor' stamp: 'Vic 2/6/2020 16:59'!visitPregunta: unaPregunta	"Implementación de visitor para exportar pregunta a JSon"	| salida |	salida := '{"pregunta":['.	salida := salida , '{"titulo":"' , unaPregunta titulo , '",'.	salida := salida , '"descripcion":"' , unaPregunta descripcion , '",'.	salida := salida , '"fechaAlta":"' , "unaPregunta fechaAlta asString" '2020-01-01T00:00:00.00000-03:00', '",'.	salida := salida , '"usuario":"' , unaPregunta usuario login , '",'.	salida := salida , '"votos":"' , unaPregunta contarVotos asString , '",'.	unaPregunta respuestas isEmpty		ifFalse: [ salida := salida , '"respuestas":['.			unaPregunta respuestas				do: [ :a | 					salida := salida , '{"descripcion":"' , a descripcion , '","fechaAlta":"'						, "a fechaAlta asString" '2020-01-01T00:00:00.00000-03:00' , '","usuario":"' , a usuario login , '","votos":"'						, a contarVotos asString , '"},' ].			salida := salida copyFrom: 1 to: salida size - 1.			salida := salida , ']}]}' ]		ifTrue: [ salida := salida copyFrom: 1 to: salida size - 1.			salida := salida , '}]}' ].	^ salida! !TestCase subclass: #VisitorJSonTest	instanceVariableNames: 'u1 u2 t1 p1 p2 p3 r1 r2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!VisitorJSonTest commentStamp: 'Vic 2/3/2020 15:01' prior: 0!Caso de prueba para VisitorJSon!!VisitorJSonTest methodsFor: 'setUp' stamp: 'Vic 2/6/2020 16:16'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lautaro' login: 'lauti'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.p1 avanzarEstado .r1:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.r2:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Me gusto pero estuvo mejor la anterior.'.u1 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p2 calificacion: true.! !!VisitorJSonTest methodsFor: 'test' stamp: 'Vic 2/6/2020 17:02'!testVisitPregunta	"Caso de prueba visitPregunta de VisitorJSon"	| vj |	vj := VisitorJSon new.	self		assert: (vj visitPregunta: p1)		equals:			'{"pregunta":[{"titulo":"F1","descripcion":"Como estuvo la ultima carrera de la Formula uno?","fechaAlta":"2020-01-01T00:00:00.00000-03:00","usuario":"vic","votos":"3","respuestas":[{"descripcion":"Estuvo muy buena, fue en Monaco y gano Hamilton","fechaAlta":"2020-01-01T00:00:00.00000-03:00","usuario":"lauti","votos":"0"},{"descripcion":"Me gusto pero estuvo mejor la anterior.","fechaAlta":"2020-01-01T00:00:00.00000-03:00","usuario":"lauti","votos":"0"}]}]}'.	self		assert: (vj visitPregunta: p2)		equals:			'{"pregunta":[{"titulo":"TC","descripcion":"Cuando es la proxima carrera del TC?","fechaAlta":"2020-01-01T00:00:00.00000-03:00","usuario":"lauti","votos":"1"}]}'! !Visitor subclass: #VisitorXML	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!VisitorXML commentStamp: 'Vic 2/3/2020 12:17' prior: 0!Implementación de Visitor para exportar preguntas y respuestas en formato XML!!VisitorXML methodsFor: 'visitor' stamp: 'Vic 2/6/2020 17:04'!visitPregunta: unaPregunta	"Implementación de visitor para exportar pregunta a XML"	| salida |	salida := '<?xml version="1.0"?><pregunta>'.	salida := salida , '<titulo>' , unaPregunta titulo , '</titulo>'.	salida := salida , '<descripcion>' , unaPregunta descripcion , '</descripcion>'.	salida := salida , '<fechaAlta>' , "unaPregunta fechaAlta asString" '2020-01-01T00:00:00.00000-03:00' , '</fechaAlta>'.	salida := salida , '<usuario>' , unaPregunta usuario login , '</usuario>'.	salida := salida , '<votos>' , unaPregunta contarVotos asString , '</votos>'.	unaPregunta respuestas isEmpty		ifFalse: [ salida := salida , '<respuestas>'.			unaPregunta respuestas				do: [ :a | 					salida := salida , '<respuesta><descripcion>' , a descripcion						, '</descripcion><fechaAlta>' , "a fechaAlta asString" '2020-01-01T00:00:00.00000-03:00' , '</fechaAlta><usuario>'						, a usuario login , '</usuario><votos>' , a contarVotos asString						, '</votos></respuesta>' ].			salida := salida , '</respuestas>' ].	salida := salida , '</pregunta>'.	^ salida! !TestCase subclass: #VisitorXMLTest	instanceVariableNames: 'u1 u2 t1 p1 p2 p3 r1 r2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-Patrones'!!VisitorXMLTest commentStamp: 'Vic 2/3/2020 15:42' prior: 0!Caso de prueba para VisitorXML!!VisitorXMLTest methodsFor: 'test' stamp: 'Vic 2/6/2020 17:05'!testVisitPregunta	"Caso de prueba visitPregunta de VisitorXML"	| vx |	vx := VisitorXML new.	self		assert: (vx visitPregunta: p1)		equals:			'<?xml version="1.0"?><pregunta><titulo>F1</titulo><descripcion>Como estuvo la ultima carrera de la Formula uno?</descripcion><fechaAlta>2020-01-01T00:00:00.00000-03:00</fechaAlta><usuario>vic</usuario><votos>3</votos><respuestas><respuesta><descripcion>Estuvo muy buena, fue en Monaco y gano Hamilton</descripcion><fechaAlta>2020-01-01T00:00:00.00000-03:00</fechaAlta><usuario>lauti</usuario><votos>0</votos></respuesta><respuesta><descripcion>Me gusto pero estuvo mejor la anterior.</descripcion><fechaAlta>2020-01-01T00:00:00.00000-03:00</fechaAlta><usuario>lauti</usuario><votos>0</votos></respuesta></respuestas></pregunta>'.	self		assert: (vx visitPregunta: p2)		equals:			'<?xml version="1.0"?><pregunta><titulo>TC</titulo><descripcion>Cuando es la proxima carrera del TC?</descripcion><fechaAlta>2020-01-01T00:00:00.00000-03:00</fechaAlta><usuario>lauti</usuario><votos>1</votos></pregunta>'! !!VisitorXMLTest methodsFor: 'setUp' stamp: 'Vic 2/6/2020 17:03'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .u1:= Usuario nombre: 'Victor' login: 'vic'  clave: '1234qwer' .u2:= Usuario nombre: 'Lautaro' login: 'lauti'  clave: '1234qwer' .t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.p1 avanzarEstado .r1:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.r2:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Me gusto pero estuvo mejor la anterior.'.u1 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p1 calificacion: true.u2 calificarEntrada: p2 calificacion: true.! !Object subclass: #CuOOra	instanceVariableNames: 'usuarios topicos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!CuOOra commentStamp: 'Vic 6/23/2019 18:38' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase CuOOra: clase de aplicacion!!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:29'!obtenerTodosLosTopicos	^ topicos! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:30'!obtenerTodosLosUsuarios	^ usuarios! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:22'!agregarTopico: unTopico	topicos add:  unTopico.! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:30'!agregarUsuario: unUsuario	usuarios add:  unUsuario.! !!CuOOra methodsFor: 'initialization' stamp: 'Victor 6/2/2019 22:18'!initialize 	"initialize de clase CuOOra"	topicos  := OrderedCollection new. 	usuarios   := OrderedCollection new.  	! !Object subclass: #Entrada	instanceVariableNames: 'usuario fechaAlta descripcion votos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Entrada commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Entrada: clase abstracta para implemetar las clases pregunta y respuesta!!Entrada methodsFor: 'accessing' stamp: 'Vic 6/29/2019 15:18'!descripcion	^ descripcion ! !!Entrada methodsFor: 'accessing' stamp: 'Vic 6/29/2019 15:13'!fechaAlta	^ fechaAlta ! !!Entrada methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:27'!descripcion: unaDescripcion	"setter de descripcion"	descripcion := unaDescripcion .! !!Entrada methodsFor: 'accessing' stamp: 'Victor 6/6/2019 19:39'!usuario	^ usuario! !!Entrada methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:23'!usuario: unUsuario	"setter de usuario"	usuario := unUsuario  .! !!Entrada methodsFor: 'initialization' stamp: 'Vic 6/30/2019 22:12'!initialize 	"initialize de clase Entrada"	descripcion  := ''. 	fechaAlta  := DateAndTime now.  	votos  := OrderedCollection new.		! !!Entrada methodsFor: 'entrada' stamp: 'Vic 7/16/2019 22:27'!contarVotos	"devuelve los votos de una entrada"	|cantVotos votosPositivos votosNegativos|	cantVotos :=0.	votosPositivos := votos count: [:a | a esPositivo]. 	votosNegativos := votos count: [:a | a esPositivo not].	cantVotos := votosPositivos - votosNegativos.	^cantVotos.! !!Entrada methodsFor: 'entrada' stamp: 'Vic 6/30/2019 22:10'!agregarVoto: unVoto	"Agrega un voto a la entrada"		 votos add: unVoto .	! !Proxy subclass: #Pregunta	instanceVariableNames: 'titulo topicos respuestas estado'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Pregunta commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Pregunta!!Pregunta methodsFor: 'initialization' stamp: 'Victor 6/9/2019 22:51'!initialize 	"initialize de clase Entrada"	super initialize.	titulo  := ''.	usuario := ''.	topicos := OrderedCollection new.	respuestas  := OrderedCollection new. 	! !!Pregunta methodsFor: 'pregunta' stamp: 'Victor 6/6/2019 19:47'!borrarRespuestas	"borrar todas las respuestas de una pregunta"	self respuestas removeAll.	! !!Pregunta methodsFor: 'pregunta' stamp: 'Vic 6/15/2019 23:41'!obtenerRespuestas	"devuelve todas las respuestas de una pregunta ordenadas por cantidad de likes"	^respuestas  asSortedCollection: [ :a :b | a contarVotos > b contarVotos  ]! !!Pregunta methodsFor: 'accessing' stamp: 'Vic 2/4/2020 16:51'!avanzarEstado	^self estado avanzarEstado: self.! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 6/2/2019 20:15'!titulo	^ titulo! !!Pregunta methodsFor: 'accessing' stamp: 'Vic 2/4/2020 16:51'!retrocederEstado	^self estado retrocederEstado: self.! !!Pregunta methodsFor: 'accessing' stamp: 'Vic 2/4/2020 16:28'!estado: anObject	estado := anObject! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:40'!titulo: unTitulo	"setter de titulo"	titulo:= unTitulo .! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 5/26/2019 15:09'!topicos: unTopico	"agrega un t√≥pico a la pregunta"	topicos add: unTopico .! !!Pregunta methodsFor: 'accessing' stamp: 'Vic 2/4/2020 16:28'!estado	^ estado! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 6/2/2019 09:05'!respuestas	^ respuestas! !!Pregunta methodsFor: 'accessing' stamp: 'Vic 2/4/2020 16:41'!agregarRespuesta: unaRespuesta	(self estado isMemberOf: Activa)		ifFalse: [ ^ self	error:	'Solo se puede agregar respuestas cuando la pregunta esta activa' ].	respuestas add: unaRespuesta! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'initialization' stamp: 'Vic 2/4/2020 16:40'!descripcion: unaDescripcion usuario: unUsuario titulo: unTitulo topico: unTopico	"Constructor de la clase Pregunta"	| preg |				preg := self new.			preg usuario: unUsuario .			preg titulo: unTitulo .			preg topicos: unTopico .			preg descripcion: unaDescripcion  .			unTopico preguntas: preg.			unUsuario preguntas: preg.			preg estado: Creada new.			^preg.				! !Entrada subclass: #Respuesta	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Respuesta commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Respuesata: permite responder una pregunta dada.!!Respuesta methodsFor: 'accessing' stamp: 'Victor 5/30/2019 22:10'!pregunta: unaPregunta	"setter de preunta"	pregunta := unaPregunta .! !!Respuesta methodsFor: 'accessing' stamp: 'Vic 6/30/2019 18:59'!pregunta	"getter de preunta"	^ pregunta .! !!Respuesta methodsFor: 'initialization' stamp: 'Vic 6/15/2019 23:35'!initialize 	"initialize de clase Entrada"	super initialize.	descripcion := ''.	fechaAlta := DateAndTime now.	usuario := ''.	pregunta := ''.		! !!Respuesta methodsFor: 'respuesta' stamp: 'Vic 7/22/2019 19:44'!estaEntreLasMejores	"devuelve verdadero si la respuesta tiene mas likes que el promedio de repuestas de la pregunta."| sum prom| 	prom := 0.	sum:= 0.	sum := pregunta respuestas sumNumbers: [ :a | a contarVotos ].	prom := sum / pregunta respuestas size . 	^ (prom < self contarVotos )  .	 	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'accesing' stamp: 'Vic 7/22/2019 19:56'!pregunta: unaPregunta usuario: unUsuario descripcion: unaDescripcion	"Constructor de la clase Respuesta"	| resp |			resp := self new.			resp usuario: unUsuario .			resp pregunta: unaPregunta  .			resp descripcion: unaDescripcion  .			unaPregunta agregarRespuesta: resp.			unUsuario agregarRespuesta: resp.			^resp.				! !Object subclass: #SluggishDAO	instanceVariableNames: 'bag'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!SluggishDAO methodsFor: 'initialization' stamp: '2222 11/20/2019 09:31'!put:anObject "almacena un objeto en memoria"| col |col:= self initializeOrGetCollecitonFor: (anObject class).col add:anObject.! !!SluggishDAO methodsFor: 'initialization' stamp: '2222 11/20/2019 09:42'!initializeOrGetCollecitonFor: aClass"inicialización lazy de las coleccion de un objeto"^bag at: aClass  ifAbsentPut: (OrderedCollection new).! !!SluggishDAO methodsFor: 'initialization' stamp: '2222 11/20/2019 10:27'!select:aBlock forClass: aClass"retorna elementos que satisfacen un bloque demorando 200ms por cada objeto de la colección "| col  selection |col:=self initializeOrGetCollecitonFor: aClass.selection:=col select: aBlock.(Delay forMilliseconds: (200*selection size)) wait.^ selection! !!SluggishDAO methodsFor: 'initialization' stamp: '2222 11/20/2019 09:16'!initializebag:= Dictionary new.! !!SluggishDAO methodsFor: 'initialization' stamp: '2222 11/20/2019 10:27'!retrieveAllByClass:aClass"retorna todos los elementos almacenados en memoria de una clase demorando 1 segundo"(Delay forMilliseconds:    1000) wait.^ OrderedCollection   newFrom:  (self initializeOrGetCollecitonFor:  aClass) ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SluggishDAO class	instanceVariableNames: ''!!SluggishDAO class methodsFor: 'instance creation' stamp: '2222 11/20/2019 09:35'!new^super new initialize ! !TestCase subclass: #SlugglishDAOTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!SlugglishDAOTestCase methodsFor: 'tests' stamp: '2222 11/20/2019 09:45'!testAddObjects| sDAO |sDAO:= SluggishDAO new.sDAO put: 'unString'.sDAO put: 'unString2'.self assert: (sDAO  retrieveAllByClass: ByteString) size  =2.! !!SlugglishDAOTestCase methodsFor: 'tests' stamp: '2222 11/20/2019 10:07'!testLookupObjects| sDAO texto1 texto2 col |sDAO:= SluggishDAO new.texto1:=sDAO put: 'unString'.texto2:=sDAO put: 'unString2'.col:=sDAO select: [:it|  it includesSubstring:  'g2' ] forClass:  ByteString.self assert: (col) size  =1! !Object subclass: #Topico	instanceVariableNames: 'titulo descripcion preguntas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Topico commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Topico: un topico es un tema en particular sobre el cual se hacen preguntas y respuestas.!!Topico methodsFor: 'topico' stamp: 'Vic 2/6/2020 10:25'!obtenerPreguntas	"devuelve todas las preguntas del topico"	| preguntasProxy |	preguntasProxy := OrderedCollection new.	preguntasProxy addAll: (self preguntas collect: [ :a | PreguntaProxy pregunta: a ]).	^ preguntasProxy! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:00'!descripcion	^ descripcion! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:00'!titulo	^ titulo! !!Topico methodsFor: 'accessing' stamp: 'Victor 6/1/2019 20:29'!preguntas	^ preguntas! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:01'!descripcion: unaDescripcion	"setter de descripcion"	descripcion := unaDescripcion .! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:37'!titulo: unTitulo	"setter de Titulo"	titulo := unTitulo  .! !!Topico methodsFor: 'accessing' stamp: 'Victor 6/1/2019 20:33'!preguntas: anObject	preguntas add:  anObject.! !!Topico methodsFor: 'initialization' stamp: 'Victor 6/1/2019 20:33'!initialize 	"initialize de clase Topico"	descripcion  := ''. 	titulo  := ''.  	preguntas := OrderedCollection new.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'initialization' stamp: 'Vic 6/28/2019 20:37'!titulo: unTitulo descrip: unaDescripcion 	"Constructor de la clase Topico"	| topico |	topico  := self new.	topico titulo: unTitulo  .	topico descripcion: unaDescripcion .	^topico.! !Object subclass: #Usuario	instanceVariableNames: 'nombreApe login clave fechaAlta followerDe topicosDeInteres preguntas respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Usuario commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Usuario: Representa a un usuario en la aplicacion.!!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/22/2019 13:57'!borrarPregunta: unaPregunta	"Borra un pregunta realizada por el usuario"(unaPregunta usuario  =  self)  		ifFalse:  [ ^self error:  'El el usuario no es el creador de la pregunta'.  ].		unaPregunta borrarRespuestas .	 preguntas remove: unaPregunta .		^'Pregunta borrada correctamente'.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:06'!obtenerRespuestas 	"devuelve todas las respuestas que realizo el usuario"	^respuestas . ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!agregarTopicosDeInteres: unTopico	"agrega un topico de interes a un usuario"			 (topicosDeInteres includes: unTopico) 		ifTrue:   [ ^self error:  'El usuario ',self nombreApe,' ya es tiene cargado el topico ',unTopico titulo .  ].								topicosDeInteres add: unTopico .! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!obtenerTodasLasPreguntas	"devuelve todas las preguntas que realizo el usuario"	^preguntas. ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:21'!realizarPregunta: unaDescripcion titulo: unTitulo  topico: unTopico	"Genera una nueva pregunta"	|preg|	preg := Pregunta descripcion: unaDescripcion usuario: self titulo: unTitulo topico: unTopico.		^preg.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 18:21'!responderPregunta: unaPregunta descripcion: unaDescripcion	"Responde una pregunta"	|resp|	resp := Respuesta pregunta: unaPregunta usuario: self descripcion: unaDescripcion .	^resp.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/16/2019 20:58'!obtenerPreguntasRelevantes	"devuelve todas las preguntas relevantes para el usuario"	|pregRelevantes |	pregRelevantes := OrderedCollection new.	topicosDeInteres  do: [:a | pregRelevantes addAll: a obtenerPreguntas  ]. 	followerDe do: [:a | pregRelevantes addAll: a obtenerTodasLasPreguntas   ]. 		^ pregRelevantes. ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!agregarFollowerDe: unUsuario	"Registra un usuario como follower de otro"	(unUsuario  = self)  		ifTrue:   [ ^self error:  'Un usuario no puede ser follower de si mismo'.  ].	 (followerDe includes: unUsuario) 		ifTrue:   [ ^self error:  'El usuario ',self nombreApe,' ya es seguidor de ',unUsuario nombreApe .  ].			followerDe add: unUsuario! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/20/2019 18:50'!calificarEntrada: unaEntrada calificacion: unaCalificacion	"Califica una entrada de forma positiva o negativa"	|calif|		calif := Voto voto: unaCalificacion  usuario: self entrada:unaEntrada .  	 unaEntrada agregarVoto: calif.	^calif.! !!Usuario methodsFor: 'initialization' stamp: 'Victor 6/3/2019 22:17'!initialize 	"initialize de clase Usuario"	nombreApe := ''. 	login := ''.  	clave :=''.	fechaAlta := DateAndTime now.	followerDe  := OrderedCollection new.	topicosDeInteres  := OrderedCollection new.	preguntas   := OrderedCollection new.	respuestas   := OrderedCollection new.! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:21'!login: unLogin	"setter de login"	login := unLogin .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!login	^ login! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:49'!topicosDeInteres	^ topicosDeInteres! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:47'!clave	"getter de clave"	^clave .! !!Usuario methodsFor: 'accessing' stamp: 'Vic 7/20/2019 19:29'!agregarRespuesta:  anObject	respuestas add:  anObject. ! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:30'!clave: unaClave	"setter de clave"	clave := unaClave .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!followerDe	^ followerDe! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!fechaAlta	^ fechaAlta! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:40'!nombreApe	"getter de nombreApe"	^ nombreApe  .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 6/3/2019 20:54'!preguntas: anObject	preguntas add:  anObject. ! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:19'!nombreApe: unNombre	"setter de nombreApe"	nombreApe := unNombre .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'initialization' stamp: 'Victor 5/24/2019 22:29'!nombre: unNombre login: unLogin clave: unaClave	"Constructor de la clase Usuario"	| user |	user := self new.	user nombreApe: unNombre .	user login: unLogin .	user clave: unaClave .	^user.! !TestCase subclass: #Voto	instanceVariableNames: 'usuario fecha esPositivo entrada'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Voto commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Voto: Se utiliza para calificar las preguntas y respuestas.la calificacion puede ser negativa o positiva y suma o resta un punto segun sea el caso.!!Voto methodsFor: 'initialization' stamp: 'Victor 6/9/2019 20:22'!initialize 	"initialize de clase Voto"	esPositivo := false. 	usuario := ''.  	entrada := ''.	fecha := DateAndTime now.	! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 22:28'!esPositivo	^ esPositivo! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:12'!esPositivo: anObject	esPositivo := anObject! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:25'!entrada: anObject	entrada := anObject! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:10'!fecha	^ fecha  ! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:10'!usuario	^ usuario ! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:12'!entrada	^entrada ! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:10'!usuario: anObject	usuario := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Voto class	instanceVariableNames: ''!!Voto class methodsFor: 'initalization' stamp: 'Vic 7/1/2019 19:15'!voto: votoPostivo usuario:unUsuario entrada:unaEntrada	"Constructor de  clase Voto"	| voto |		"(unUsuario  isMemberOf: Usuario)  	 ifFalse:  [ ^self error:  'El objeto enviado no es una instancia de la clase Usuario'.  ].	 (unaEntrada   isKindOf: Entrada)  	 ifFalse:  [ ^self error:  'El objeto enviado no es una instancia de la clase Entrada'.  ]."			voto := self new.			voto usuario: unUsuario .			voto esPositivo:  votoPostivo .			voto entrada: unaEntrada .			^voto.					  			! !